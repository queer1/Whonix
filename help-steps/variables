#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

if [ ! "$whonix_build_no_unset_xtrace" ]; then
   set +x
fi
#set -x

#echo "INFO: Currently running script: $BASH_SOURCE"

## {{ Sanity Tests.

command -v logname >/dev/null
command -v whoami >/dev/null
command -v dirname >/dev/null
command -v basename >/dev/null
command -v awk >/dev/null
command -v grep >/dev/null

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

bash -n "$BASH_SOURCE"

## }}

## Since the script runs as root, we can not use $USER or whoami (that would be set to root).
if [ "$user_name" = "" ]; then
   if [ ! "$SUDO_USER" = "" ]; then
      true "INFO $BASH_SOURCE: Setting user_name to SUDO_USER $SUDO_USER..."
      user_name="$SUDO_USER"
   fi
   if [ "$user_name" = "" ]; then
      true "INFO $BASH_SOURCE: Trying to set user_name by using \`logname\`."
      user_name="$(logname)" || true
   fi
   ## {{ drone.io specific workaround.
   if [ "$user_name" = "" ]; then
      echo "INFO $BASH_SOURCE: SUDO_USER: $SUDO_USER"
      true "INFO $BASH_SOURCE: Trying to set user_name by using \`whoami\`."
      user_name="$(whoami)"
      echo "INFO $BASH_SOURCE: Set user_name to $user_name using whoami."
   fi
   ## }}
   if [ "$user_name" = "" ]; then
      error "Variable user_name is empty."
   fi
fi
export user_name

[ -n "$HOMEVAR" ] || HOMEVAR="/home/$user_name"
export HOMEVAR
[ -n "$WHONIX_BINARY" ] || WHONIX_BINARY="$HOMEVAR/whonix_binary"
export WHONIX_BINARY

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
[ -n "$WHONIX_SOURCE_FOLDER" ] || WHONIX_SOURCE_FOLDER="$(dirname "$MYDIR")"
export WHONIX_SOURCE_FOLDER

[ -n "$whonix_parent_folder" ] || whonix_parent_folder="$(dirname "$WHONIX_SOURCE_FOLDER")"
[ -n "$whonix_dev_meta_files_folder" ] || whonix_dev_meta_files_folder="$WHONIX_SOURCE_FOLDER/packages/whonix-developer-meta-files"

[ -n "$WHONIX_SOURCE_PARENTDIR" ] || WHONIX_SOURCE_PARENTDIR="$(dirname "$WHONIX_SOURCE_FOLDER")"
export WHONIX_SOURCE_PARENTDIR

[ -n "$WHONIX_SOURCE_HELP_STEPS_FOLDER" ] || WHONIX_SOURCE_HELP_STEPS_FOLDER="$WHONIX_SOURCE_FOLDER/help-steps"
export WHONIX_SOURCE_HELP_STEPS_FOLDER

cd "$WHONIX_SOURCE_FOLDER"

[ -n "$DEBIAN_FRONTEND" ] || DEBIAN_FRONTEND="noninteractive"
export DEBIAN_FRONTEND

## Avoiding "perl: warning: Setting locale failed." as suggested on
## https://wiki.ubuntu.com/DebootstrapChroot and
## https://lists.debian.org/debian-amd64/2005/08/msg00249.html.
#[ -n "$LANG" ] || LANG="C"
LANG="C"
export LANG

## Disable uwt while building Whonix,
## because it is not functional while building Whonix from source code.
echo 'INFO: Setting... export UWT_DEV_PASSTHROUGH="1"'
[ -n "$UWT_DEV_PASSTHROUGH" ] || UWT_DEV_PASSTHROUGH="1"
export UWT_DEV_PASSTHROUGH

[ -n "$DEBDEBUG" ] || DEBDEBUG="1"
export DEBDEBUG

if [ ! "$whonix_build_one_parsed" = "1" ]; then
   MINUS_X_SET="0"
   test -o xtrace || { MINUS_X_SET="$?" ; true; };
   if [ "$MINUS_X_SET" = "0" ]; then
      ## -x was set
      bash -n "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      source "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      whonix_build_one_parse_cmd ${1+"$@"}
   else
      ## -x was not set
      set -x
set -e
      bash -n "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      source "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      whonix_build_one_parse_cmd ${1+"$@"}
      set +x
   fi
   whonix_build_one_parsed="1"
   export whonix_build_one_parsed
fi

if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway"
   export VMNAME
   [ -n "$VMRAM" ] || VMRAM="768"
   export VMRAM
   ## 8 MB is VirtualBox's default. Used up to Whonix 8.
   [ -n "$VRAM" ] || VRAM="8"
   export VRAM
fi

if [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation"
   export VMNAME
   [ -n "$VMRAM" ] || VMRAM="768"
   export VMRAM
   [ -n "$VRAM" ] || VRAM="128"
   export VRAM
fi

if [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
   [ -n "$VMNAME" ] || VMNAME="Whonix-Custom-Workstation"
   export VMNAME
   [ -n "$VMRAM" ] || VMRAM="768"
   export VMRAM
   [ -n "$VRAM" ] || VRAM="128"
   export VRAM
fi

## vmsize 100 GB does not matter because grml-debootstrap creates sparse files,
## i.e. only space, which gets actually filled up, will take disk space.
[ -n "$VMSIZE" ] || VMSIZE="100G"
export VMSIZE

## Disk identifier for grml-debootstrap and anon-shared-build-fix-grub.
## https://github.com/grml/grml-debootstrap/pull/28
[ -n "$DISK_IDENTIFIER" ] || DISK_IDENTIFIER='26ada0c0-1165-4098-884d-aafd2220c2c6'
export DISK_IDENTIFIER

if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
   if [ "$VMNAME" = "" ]; then
      VMNAME="internal"
      export VMNAME
   fi
fi

if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
   if [ "$CHROOT_FOLDER" = "" ]; then
      CHROOT_FOLDER=""
   fi
else
   [ -n "$CHROOT_FOLDER" ] || CHROOT_FOLDER="$WHONIX_BINARY/${VMNAME}_image"
   ANON_BUILD_INSTALL_TO_ROOT="0"
   export ANON_BUILD_INSTALL_TO_ROOT
fi
export CHROOT_FOLDER

true "variables INFO: CHROOT_FOLDER: $CHROOT_FOLDER"

if [ "$VMNAME" = "unknown" ]; then
   true "variables ERROR: VMNAME is unknown. Please report this bug!"
   exit 1
fi

if [ "$VMNAME" = "internal" ]; then
   echo "variables INFO: Internal run."
else
   true "variables INFO: VMNAME is $VMNAME"
fi

if [ "$VMNAME" = "" ]; then
   MSG="${red}${bold}variables ERROR: VMNAME is empty! Please report this bug!${reset}"
   echo "$MSG"
   bug "$MSG"
fi

if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
   if [ "$CHROOT" = "" ]; then
      CHROOT=""
   fi
else
   [ -n "$CHROOT" ] || CHROOT="chroot $CHROOT_FOLDER"
fi

if [ "$no_git" = "1" ]; then
   [ -n "$git_bin" ] || git_bin="true"
else
   [ -n "$git_bin" ] || git_bin="git"
fi

[ -n "$whonix_build_grml_bin" ] || whonix_build_grml_bin="grml-debootstrap"

[ -n "$rsync_opts" ] || rsync_opts="\
   --perms \
   --chmod=ug+r \
   --times \
   --partial \
   --progress \
   --verbose \
"

[ -n "$whonix_build_auto_retry" ] || whonix_build_auto_retry="1"
[ -n "$whonix_build_wait_auto_retry" ] || whonix_build_wait_auto_retry="5"

## Sanity Test.
command -v "$git_bin" >/dev/null

[ -n "$DEB_INSTALL_FOLDER" ] || DEB_INSTALL_FOLDER="/mnt/initialdeb"
export DEB_INSTALL_FOLDER

[ -n "$EMPTY_DIR" ] || EMPTY_DIR="/tmp/empty"
export EMPTY_DIR

[ -n "$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER" ] || WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER="/var/lib/whonix/sources_temp_list.d"

[ -n "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN" ] || WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN="/tmp/whonix_build_apt-get_gpgv"
export WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN

[ -n "$WHONIX_BUILD_APT_GET_GPGV_LOG" ] || WHONIX_BUILD_APT_GET_GPGV_LOG="/tmp/whonix_build_apt-get_gpgv.log"
export WHONIX_BUILD_APT_GET_GPGV_LOG

## {{{ whonix_build_on_operating_system

if [ "$whonix_build_on_operating_system_detect_skip" = "1" ]; then
   true "Probably run by prepare-build-machine script. lsb_release may not yet installed. Skipping setting whonix_build_on_operating_system."
else
   ## Let's find out on which host operating system the build script is running.
   [ -n "$whonix_build_on_operating_system" ] || whonix_build_on_operating_system="$(lsb_release --short --i)"
   ## Converting whonix_build_on_operating_system to lower case to make later if comparison easier.
   whonix_build_on_operating_system="${whonix_build_on_operating_system,,}"
   ## Example whonix_build_on_operating_system: debian
   ## Example whonix_build_on_operating_system: ubuntu
fi

## }}}

## {{{ whonix_build_current_git_head

[ -n "$whonix_build_current_git_head" ] || whonix_build_current_git_head="$(git rev-parse HEAD)"

#echo "whonix_build_current_git_head: $whonix_build_current_git_head"

## }}}

## {{{ anon_dist_build_version

## --always because travis-ci does not fetch tags.
temp="$($git_bin describe --always --abbrev=1000000000)"

## Examples temp:
## 10-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5
## 10.0.0.0.3-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5-developers-only

if [ "$anon_dist_build_version" = "" ]; then
   anon_dist_build_version="$temp"
   anon_dist_build_version="$(echo "$anon_dist_build_version" | sed "s|-developers-only||g")"
   anon_dist_build_version="$(echo "$anon_dist_build_version" | sed "s|-testers-only||g")"
   anon_dist_build_version="$(echo "$anon_dist_build_version" | sed "s|-stable||g")"
   echo "${cyan}${bold}INFO: Variable anon_dist_build_version was unset. Auto detected. Set to: ${anon_dist_build_version}${reset}"
else
   echo "${cyan}${bold}INFO: Variable anon_dist_build_version was already set to: ${anon_dist_build_version}${reset}"
fi

## Using `export`, so 70_log_build_version can read it.
export anon_dist_build_version

## Example anon_dist_build_version:
## 10.0.0.0.3-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5

## }}}

[ -n "$binary_image_raw" ] || binary_image_raw="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.raw"

[ -n "$binary_image_qcow2" ] || binary_image_qcow2="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.qcow2"

[ -n "$binary_image_ova" ] || binary_image_ova="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.ova"
[ -n "$binary_image_ova_signature" ] || binary_image_ova_signature="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.ova.asc"
[ -n "$binary_image_ova_torrent" ] || binary_image_ova_torrent="$WHONIX_BINARY/torrent-$anon_dist_build_version/$VMNAME-$anon_dist_build_version.ova.torrent"
[ -n "$binary_image_ova_torrent_signature" ] || binary_image_ova_torrent_signature="$WHONIX_BINARY/torrent-$anon_dist_build_version/$VMNAME-$anon_dist_build_version.ova.torrent.asc"

[ -n "$libvirt_source_kvm_file" ] || libvirt_source_kvm_file="$WHONIX_SOURCE_FOLDER/packages/whonix-libvirt/usr/share/whonix-libvirt/xml/${VMNAME}_kvm.xml"
[ -n "$libvirt_target_kvm_file" ] || libvirt_target_kvm_file="$WHONIX_BINARY/${VMNAME}_kvm-$anon_dist_build_version.xml"

[ -n "$libvirt_source_qemu_newer_archs_file" ] || libvirt_source_qemu_newer_archs_file="$WHONIX_SOURCE_FOLDER/packages/whonix-libvirt/usr/share/whonix-libvirt/xml/${VMNAME}_qemu.xml"
[ -n "$libvirt_target_qemu_newer_archs_file" ] || libvirt_target_qemu_newer_archs_file="$WHONIX_BINARY/${VMNAME}_qemu-$anon_dist_build_version.xml"

[ -n "$libvirt_source_network_file" ] || libvirt_source_network_file="$WHONIX_SOURCE_FOLDER/packages/whonix-libvirt/usr/share/whonix-libvirt/xml/Whonix_network.xml"
[ -n "$libvirt_target_network_file" ] || libvirt_target_network_file="$WHONIX_BINARY/Whonix_network-$anon_dist_build_version.xml"

[ -n "$libvirt_target_xz_archive" ] || libvirt_target_xz_archive="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.libvirt.xz"
[ -n "$libvirt_target_xz_archive_signature" ] || libvirt_target_xz_archive_signature="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.libvirt.xz.asc"
[ -n "$libvirt_target_xz_archive_torrent" ] || libvirt_target_xz_archive_torrent="$WHONIX_BINARY/torrent-$anon_dist_build_version/$VMNAME-$anon_dist_build_version.libvirt.xz.torrent"
[ -n "$libvirt_target_xz_archive_torrent_signature" ] || libvirt_target_xz_archive_torrent_signature="$WHONIX_BINARY/torrent-$anon_dist_build_version/$VMNAME-$anon_dist_build_version.libvirt.xz.torrent.asc"

[ -n "$sha_five_hundredth_twelve_hash_file" ] || sha_five_hundredth_twelve_hash_file="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.sha512sums"
[ -n "$sha_five_hundredth_twelve_hash_file_signature" ] || sha_five_hundredth_twelve_hash_file_signature="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.sha512sums.asc"

if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
   [ -n "$whonix_build_qcow2_file_list" ] || whonix_build_qcow2_file_list="\
      $binary_image_qcow2 \
      $libvirt_target_kvm_file \
      $libvirt_target_qemu_newer_archs_file \
      $libvirt_target_network_file \
   "
elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
   [ -n "$whonix_build_qcow2_file_list" ] || whonix_build_qcow2_file_list="\
      $binary_image_qcow2 \
      $libvirt_target_kvm_file \
      $libvirt_target_qemu_newer_archs_file \
   "
fi

## {{{ buildconfig.d

[ -n "$whonix_build_config_dirs" ] || whonix_build_config_dirs="$WHONIX_SOURCE_FOLDER/buildconfig.d /etc/whonix_buildconfig.d ../buildconfig.d"

whonix_build_source_config_dir() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   true "${cyan}INFO: Checking if whonix_build_config_dir $whonix_build_config_dir exists...${reset}"
   if [ -d "$1" ]; then
      true "${cyan}INFO: Parsing $1...${reset}"
      for i in "$1/"*; do
         if [ -f "$i" ]; then
            ## If the last character is a ~, ignore that file,
            ## because it was created by some editor,
            ## which creates backup files.
            if [ "${i: -1}" = "~" ]; then
               true "${cyan}INFO: Skipping file_name $i because it ends with ~.${reset}"
               continue
            fi
            ## Skipping files such as .dpkg-old and .dpkg-dist.
            if ( echo "$i" | grep -q ".dpkg-" ); then
               true "${cyan}INFO: Skipping file_name $i because it ends with .dpkg-.${reset}"
               continue
            fi
            bash -n "$i"
            source "$i"
         fi
      done
   else
      true "${cyan}INFO: Skipping $1 because it does not exist.${reset}"
   fi
}

for whonix_build_config_dir in $whonix_build_config_dirs; do
   whonix_build_source_config_dir "$whonix_build_config_dir"
done

if [ ! "$whonix_build_custom_config_dir" = "" ]; then
   whonix_build_source_config_dir "$whonix_build_custom_config_dir"
fi

if [ ! "$whonix_build_conf_file" = "" ]; then
   if [ -f "$whonix_build_conf_file" ]; then
      bash -n "$whonix_build_conf_file"
      source "$whonix_build_conf_file"
   fi
fi

## }}}

## {{{ fallback variables for debchange (dch), dpkg-buildpackage and debuild

[ -n "$DEBFULLNAME" ] || DEBFULLNAME="Whonix auto generated local APT signing key"
export DEBFULLNAME

[ -n "$DEBEMAIL" ] || DEBEMAIL="whonix@local-signing.key"
export DEBEMAIL

[ -n "$DEBUILD_LINTIAN_OPTS" ] || DEBUILD_LINTIAN_OPTS="--info --display-info --fail-on-warnings"
export DEBUILD_LINTIAN_OPTS

if [ "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" = "" ]; then
   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "" ]; then
      WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY="1"
      export WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY
      WHONIX_LOCAL_SIGNING_KEY_FOLDER="$WHONIX_BINARY/gpg-local-signing-key"
      export WHONIX_LOCAL_SIGNING_KEY_FOLDER
   else
      WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY="0"
      export WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY
      ## Do not touch WHONIX_LOCAL_SIGNING_KEY_FOLDER - the user is expected to
      ## set this as a build configuration.
   fi
fi

## }}}

## {{{ apt repository variables

[ -n "$WHONIX_BUILD_APT_CODENAME" ] || WHONIX_BUILD_APT_CODENAME="local"
export WHONIX_BUILD_APT_CODENAME

## }}}

## {{{ reprepro variables

if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
   temp="aptrepo_local"
else
   temp="aptrepo_remote"
fi

[ -n "$WHONIX_APT_REPOSITORY_FOLDER" ] || WHONIX_APT_REPOSITORY_FOLDER="$WHONIX_BINARY/$temp"
export WHONIX_APT_REPOSITORY_FOLDER

[ -n "$WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS" ] || \
   WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS="\
      --gnupghome $WHONIX_LOCAL_SIGNING_KEY_FOLDER \
      --basedir $WHONIX_SOURCE_FOLDER/$temp \
      --outdir $WHONIX_BINARY/$temp \
      --dbdir $WHONIX_BINARY/$temp/db \
      --logdir $WHONIX_BINARY/$temp/log"
export WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS

## }}}

## {{{ BUILD_TARGET_ARCH

## Default architecture.
## Using export, so it can be read by chroot-post.d scripts.
[ -n "$BUILD_TARGET_ARCH" ] || BUILD_TARGET_ARCH="i386"
export BUILD_TARGET_ARCH

## }}}

[ -n "$whonix_build_file_system" ] || whonix_build_file_system="ext4"

[ -n "$whonix_build_hostname" ] || whonix_build_hostname="host"

[ -n "$whonix_build_os_password" ] || whonix_build_os_password="changeme"

[ -n "$whonix_build_debopt" ] || whonix_build_debopt="--verbose"

## {{{ SKIP_SCRIPTS

## Would be nicer to have this in the 'pre' script, but the 'variables' script
## runs after 'pre' to provide pretty color functions.
own_filename="$(basename "$BASH_SOURCE")"
for skip_script in $SKIP_SCRIPTS; do
   if [ "$own_filename" = "$skip_script" ]; then
      unset skip_script
      echo "${bold}${green}INFO: Skipping $own_filename, because SKIP_SCRIPTS includes it. ${reset}"
      exit 0
   fi
done
unset skip_script

## }}}

set -x
set -e
