#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

if [ ! "$whonix_build_no_unset_xtrace" ]; then
   set +x
fi
#set -x
set -e
set -o pipefail
set -o errtrace

errorhandlershell() {
   true "${cyan}${bold}INFO: Opening interactive shell...${reset}"
   true "${cyan}${bold}INFO: When you have finished, please enter \"exit 0\" to \
continue (Recommended against!) or \"exit 1\" to cleanup and exit. (Recommended.)${reset}"
   interactive_chroot_shell_bash_exit_code="0"
   $CHROOT /bin/bash || { interactive_chroot_shell_bash_exit_code="${PIPESTATUS[0]}" ; true; };
   if [ "$interactive_chroot_shell_bash_exit_code" = "0" ]; then
      true "${cyan}${bold}INFO: Interactive shell termited with \
exit code $interactive_chroot_shell_bash_exit_code, will ignore this error and continue...${reset}"
      ignore_error="true"
   else
      true "${cyan}${bold}INFO: Interactive shell termited with \
exit code $interactive_chroot_shell_bash_exit_code, cleanup and exit as requested...${reset}"
      ignore_error="false"
   fi
}

errorhandlerretry() {
   if [ ! "$whonix_build_dispatch_before_retry" = "" ]; then
      true "${cyan}${bold}INFO: dispatch before retry (--retry-before)...: $whonix_build_dispatch_before_retry ${reset}"
      whonix_build_dispatch_before_retry_exit_code="0"
      eval $whonix_build_dispatch_before_retry || { whonix_build_dispatch_before_retry_exit_code="$?" ; true; };
      if [ "$whonix_build_dispatch_before_retry_exit_code" = "0" ]; then
         true "${cyan}${bold}INFO: dispatch before retry (--retry-after) exit code was 0, ok. ${reset}"
      else
         true "${red}${bold}INFO: dispatch before retry (--retry-before) non-zero exit code: $whonix_build_dispatch_before_retry_exit_code ${reset}"
      fi
   else
      true "INFO: Skipping whonix_build_dispatch_before_retry (--retry-before), because empty, ok."
   fi

   true "${cyan}${bold}INFO: Retrying last_failed_bash_command...: $last_failed_bash_command ${reset}"
   retry_last_failed_bash_command_exit_code="0"
   eval $last_failed_bash_command || { retry_last_failed_bash_command_exit_code="$?" ; true; };
   if [ "$retry_last_failed_bash_command_exit_code" = "0" ]; then
      true "${cyan}${bold}INFO: Retry succeeded. exit code of last_failed_bash_command: $retry_last_failed_bash_command_exit_code ${reset}"
      unset whonix_build_auto_retry_counter
   else
      true "${red}${bold}INFO: Retry failed. exit code of last_failed_bash_command: $retry_last_failed_bash_command_exit_code ${reset}"
      last_failed_exit_code="$retry_last_failed_bash_command_exit_code"
      last_failed_bash_command="$last_failed_bash_command"
   fi

   if [ ! "$whonix_build_dispatch_after_retry" = "" ]; then
      true "${cyan}${bold}INFO: dispatch after retry (--retry-after)...: $whonix_build_dispatch_after_retry ${reset}"
      whonix_build_dispatch_after_retry_exit_code="0"
      eval $whonix_build_dispatch_after_retry || { whonix_build_dispatch_after_retry_exit_code="$?" ; true; };
      if [ "$whonix_build_dispatch_after_retry_exit_code" = "0" ]; then
         true "${cyan}${bold}INFO: dispatch after retry (--retry-after) exit code was 0, ok. ${reset}"
      else
         true "${red}${bold}INFO: dispatch after retry (--retry-after) non-zero exit code: $whonix_build_dispatch_after_retry_exit_code ${reset}"
      fi
   else
      true "INFO: Skipping whonix_build_dispatch_after_retry (--retry-after), because empty, ok."
   fi

   if [ "$retry_last_failed_bash_command_exit_code" = "0" ]; then
      return 0
   else
      errorhandlerprocessshared "NONE (called by $FUNCNAME)"
   fi
}

errorhandlershared() {
   last_failed_exit_code="$?"
   last_failed_bash_command="$BASH_COMMAND"
   ## $1 contains trap signal type.
   errorhandlerprocessshared "$1"
}

errorhandlerprocessshared() {
   last_caller="$(caller)"
   last_script="$BASH_SOURCE"
   ## $1 contains trap signal type.
   trap_signal_type_last="$1"
   whonix_build_error_counter="$(( $whonix_build_error_counter + 1 ))"
   benchmarktimeend ## sets benchmark_took_time (implemented in help-steps/pre)
   true "
############################################################
${red}${bold}ERROR in $last_script detected!${reset}
(whonix_build_error_counter: $whonix_build_error_counter)
(benchmark: $benchmark_took_time)
${red}${bold}trap_signal_type_last${reset}: $trap_signal_type_last
${red}${bold}last_failed_bash_command${reset}: $last_failed_bash_command
${red}${bold}last_failed_exit_code${reset}: $last_failed_exit_code
${red}${bold}caller: $last_caller${reset}
${red}${bold}ERROR in $last_script!${reset}
############################################################
"

   if [ "$trap_signal_type_last" = "ERR" ]; then
      true "INFO: Signal trap ERR, considering auto retry..."
      if [ ! "$whonix_build_auto_retry" = "0" ]; then
         if [ "$whonix_build_auto_retry_counter" = "" ]; then
            whonix_build_auto_retry_counter="1"
         fi
         [ -n "$whonix_build_auto_retry" ] || whonix_build_auto_retry="1"
         [ -n "$whonix_build_wait_auto_retry" ] || whonix_build_wait_auto_retry="5"
         if [ "$whonix_build_auto_retry_counter" -gt "$whonix_build_auto_retry" ]; then
            true "${cyan}${bold}INFO: Auto retried (--retry-max) already $whonix_build_auto_retry times. No more auto retry. ${reset}"
         else
            true "${cyan}${bold}INFO: Auto retry attempt number: $whonix_build_auto_retry_counter. Max retry attempts: $whonix_build_auto_retry (--auto-retry). Auto retry... ${reset}"
            whonix_build_auto_retry_counter="$(( $whonix_build_auto_retry_counter + 1 ))"
            if [ ! "$whonix_build_wait_auto_retry" = "0" ]; then
               true "${cyan}${bold}INFO: Waiting (--retry-wait) $whonix_build_wait_auto_retry seconds before auto retry... ${reset}"
               sleep "$whonix_build_wait_auto_retry" &
            fi
            wait "$!"
            ignore_error="true"
            error_handler_do_retry="true"
            errorhandlerretry
            return 0
         fi
      fi
   else
      true "INFO: No auto retry for non ERR signal type: $trap_signal_type_last"
   fi
   unset whonix_build_auto_retry_counter

   true "INFO: whonix_build_non_interactive: $whonix_build_non_interactive | CI: $CI"
   if [ "$whonix_build_non_interactive" = "true" ] || [ "$CI" = "true" ]; then
      true "INFO: using non-interactive error handler."
   else
      read -p "\
${red}${bold}ERROR in $BASH_SOURCE detected!
Please have a look above \"errorhandlergeneral\", note the command that failed, its output and last_failed_exit_code.
- Please enter c and press enter to ignore the error and continue building. (Recommended against!)
- Please press r and enter to retry.
- Please press s and enter to open an chroot interactive shell.
- Please press enter to cleanup and exit. ${reset}" answer
   fi
   ignore_error=""
   error_handler_do_retry=""
   if [ "$answer" = "continue" ] || [ "$answer" = "c" ]; then
      ignore_error="true"
      interactive_chroot_shell="false"
   elif [ "$answer" = "s" ] || [ "$answer" = "shell" ]; then
      interactive_chroot_shell="true"
      errorhandlershell
   elif [ "$answer" = "r" ] || [ "$answer" = "retry" ]; then
      ignore_error="true"
      error_handler_do_retry="true"
      errorhandlerretry
   else
      ignore_error="false"
      interactive_chroot_shell="false"
   fi
}

if [ "$whonix_build_error_counter" = "" ]; then
   whonix_build_error_counter="0"
fi

errorhandlermaybeexit() {
   if [ "$error_handler_do_retry" = "true" ]; then
      true "INFO ($FUNCNAME): auto retry succeeded. Will not exit. Continue."
      return 0
   fi
   if [ "$ignore_error" = "true" ]; then
      abort_or_continue="Continue"
   else
      abort_or_continue="Aborted"
      ## Removing temporary debian testing (jessie) repository.
      rm --force "/etc/apt/sources.list.d/whonix_temp.list"
      ## Remove lockfile for whonixcheck.
      rm --force "/var/run/package_manager_lock"
      rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
      rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"
   fi
   if [ "$ignore_error" = "true" ]; then
      true "INFO: whonix_build_non_interactive: $whonix_build_non_interactive | CI: $CI"
      if [ "$whonix_build_non_interactive" = "true" ] || [ "$CI" = "true" ]; then
         true "INFO: using non-interactive error handler."
      else
         true "${red}${bold}You have chosen to ignore this error. Your build may be unstable!
This is recommended against unless you know what you are doing. Do not report
bugs, that are a result of this! Please press enter to continue. ${reset}"
      fi
   else
      exit 1
   fi
}

errorhandlergeneral() {
   true "INFO: Begin of function $FUNCNAME."
   ## $1 contains trap signal type.
   errorhandlershared "$1"
   errorhandlermaybeexit "$1"
   true "INFO: End of function $FUNCNAME."
}

errorhandlerunchrootunpreventunmount() {
   ## $1 contains trap signal type.
   errorhandlershared "$1"
   if [ "$ignore_error" = "false" ]; then
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/remove-local-temp-apt-repo
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-raw
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unprevent-daemons-from-starting
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw
   fi
   errorhandlermaybeexit "$1"
}

errorhandlerunmount() {
   ## $1 contains trap signal type.
   errorhandlershared "$1"
   if [ "$ignore_error" = "false" ]; then
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw
   fi
   errorhandlermaybeexit "$1"
}

## Thanks to:
## camh
## http://stackoverflow.com/a/2183063/2605155
errorhandlersetup() {
   local handler signal
   ## $1 contains the name of the error handler function.
   handler="$1" ; shift
   for signal ; do
       trap "$handler $signal" "$signal"
   done
}

errorhandlersetup "errorhandlergeneral" ERR INT TERM
set +e

export -f errorhandlershell
export -f errorhandlerretry
export -f errorhandlershared
export -f errorhandlerprocessshared
export -f errorhandlermaybeexit
export -f errorhandlergeneral
export -f errorhandlerunchrootunpreventunmount
export -f errorhandlerunmount
export -f errorhandlersetup

errorhandlersetup "errorhandlergeneral" ERR INT TERM

bash -n "$BASH_SOURCE"

maybe_set_plus_x() {
   if [ "$MINUS_X_SET" = "1" ]; then
      set +x
   fi
}

## Thanks to  perreal for the convertsecs function.
## http://stackoverflow.com/a/12199798
convertsecs() {
   local h m s
   ((h="${1}/3600")) || true
   ((m="(${1}%3600)/60")) || true
   ((s="${1}%60")) || true
   printf "%02d:%02d:%02d\n" "$h" "$m" "$s" || true
}

export -f convertsecs

benchmark_time_start() {
   export benchmark_time_start="$(date +%s)" || true
}

benchmarktimeend() {
   benchmarktimeend="$(date +%s)" || true
   benchmark_took_seconds="$(( $benchmarktimeend - $benchmark_time_start ))" || true
   benchmark_took_time="$(convertsecs "$benchmark_took_seconds")" || true
}

export -f benchmarktimeend

## start benchmarktimeend
benchmark_time_start

root_check() {
   if [ "$(id -u)" != "0" ]; then
       echo "${red}${bold}ERROR: This must be run as root (sudo)!${reset}"
       exit 1
   else
       true "INFO: Script running as root."
   fi
}

lower_priorities() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   ## Lower IO priority.
   ionice -c3 -p$$

   ## Debugging.
   ionice >/dev/null

   ## Lower CPU priority.
   renice +19 -p $$ >/dev/null

   ## Debugging.
   nice >/dev/null

   export whonix_build_already_lowered_priorities="true"
}

if [ ! "$whonix_build_already_lowered_priorities" = "true" ]; then
   lower_priorities
fi

aptcachemaybeenable() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      ## Someone updating Whonix-Gateway from source code.

      ## apt-cacher-ng will not work on Whonix-Gateway, because Whonix-Gateway
      ## does not have TransPort / DnsPort by default.
      echo 'INFO: Not setting http_proxy, because Whonix-Gateway detected, ok.'
      true
   else
      if [ "$http_proxy" = "" ]; then
         ## Enable apt-cacher-ng.
         echo 'INFO: Setting, export http_proxy="http://127.0.0.1:3142"'
         export http_proxy="http://127.0.0.1:3142"
      else
         echo "INFO: Leaving custom variable http_proxy $http_proxy as is."
      fi
   fi
}

export -f aptcachemaybeenable

apt_cache_disable() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   unset http_proxy
}

export -f apt_cache_disable

## {{ apt_get_gpgv

aptgetgpgvcreatetmp() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   ## workaround for
   ##     apt: Provide meaningful exit codes for gpg failures
   ##     https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=745735
   ## W: A error occurred during the signature verification.
   ## To catch situations such as:
   ##     The repository is not updated and the previous index files will be used.
   ##     GPG error: http://deb.torproject.org stable Release: The following signatures were invalid: KEYEXPIRED 1409325681 KEYEXPIRED 1409325681 KEYEXPIRED 1409325681 KEYEXPIRED 1409325681
   ## That apt-repository would otherwise be silently ignored without error notification.

   apt_get_gpgv_opts+=" -o Dir::Bin::gpg=$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN "
   export apt_get_gpgv_opts

   rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
   touch "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"

   ## apt-get calls gpgv (this gpgv wrapper) with --status-fd 3. We redirect
   ## a copy of file descriptor 3 to the log.
   ## Variable WHONIX_BUILD_APT_GET_GPGV_LOG gets set and exported in help-steps/variables.
   echo '#!/bin/bash
gpgv ${1+"$@"} 3> >(tee --append "$WHONIX_BUILD_APT_GET_GPGV_LOG" >&3)' > "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"

   chmod +x "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
}

export -f aptgetgpgvcreatetmp

aptgetgpgvparsetmp() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   local gpg_log
   gpg_log="$(cat "$WHONIX_BUILD_APT_GET_GPGV_LOG")"
   if [ "$gpg_log" = "" ]; then
      true "ERROR: variable gpg_log is empty!"
      error "See above!"
   fi

   local current_unixtime
   current_unixtime="$(date +%s)"
   local current_time
   current_time="$(date)"

   OIFS="$IFS"
   IFS="
"

   for line in $gpg_log; do
      IFS="$OIFS"
      true "line: $line"
      local one two three four five
      read -r one two three four five _ <<< "$line"
      true "one: $one | two: $two | three: $three | four: $four | five: $five"
      if [ "$two" = "KEYEXPIRED" ]; then
         local keyexpired_unixtime
         keyexpired_unixtime="$three"
         if [ "$current_unixtime" -ge "$keyexpired_unixtime" ]; then
            local difference_in_seconds difference_in_minutes difference_in_hours difference_in_days difference_in_years month_has_seconds half_month_has_seconds maximum_age_in_seconds
            difference_in_seconds="$(( $current_unixtime - $keyexpired_unixtime ))"
            difference_in_minutes="$(( $difference_in_seconds / 60 ))"
            difference_in_hours="$(( $difference_in_minutes / 60 ))"
            difference_in_days="$(( $difference_in_hours / 24 ))"
            difference_in_years="$(( $difference_in_days / 365 ))"
            month_has_seconds="2592000"
            half_month_has_seconds="$(( $month_has_seconds / 2 ))"
            maximum_age_in_seconds="$half_month_has_seconds"
            if [ "$difference_in_seconds" -ge "$maximum_age_in_seconds" ]; then
               true "${bold}${red}ERROR: apt-get gpgv KEYEXPIRED!
current_unixtime: $current_unixtime
keyexpired_unixtime: $keyexpired_unixtime
current_time: $current_time
difference_in_seconds: $difference_in_seconds
difference_in_minutes: $difference_in_minutes
difference_in_hours: $difference_in_hours
difference_in_days: $difference_in_days
difference_in_years: $difference_in_years
See above!${reset}"
               error "See above!"
            fi
         fi
      fi
   done

   ## Fallback, in case $gpg_log was empty and that error was skipped.
   IFS="$OIFS"
}

export -f aptgetgpgvparsetmp

aptgetgpgvdeletetmp() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM
   rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
   rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"
}

export -f aptgetgpgvdeletetmp

## Prevent the log from needlessly filling up.
rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"

## }} apt_get_gpgv

#echo "${bold}Currently running script: $BASH_SOURCE${reset}"

set -x
