#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

whonix_build_one_parsed="1"
VMNAME="internalrun"

source pre
source colors
source variables

root_check

cd "$MYDIR"
cd ..

signing_key() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   ## We need to create a local signing key for signing our local APT repository. Otherwise,
   ## apt-get would complain, that the package can not be verified. In theory, signing is not
   ## required, because the local APT repository never touches any networks. However, ignoring
   ## this warning while installing the meta package, which pull the other packages, could
   ## make apt-get ignore if those packages can not be verified either. Shipping an already
   ## created gpg snake oil (because known to the public) secret key is no option either,
   ## because anyone could get this key, which also needs to be added to apt-key. In that case,
   ## anyone could sign packages with this snake oil key. Therefore we play it safe and
   ## create a local signing key on the build machine.

   ## We only automatically create am auto local signing key, in case the builder did not
   ## provide a custom folder for WHONIX_LOCAL_SIGNING_KEY_FOLDER. This is determined in
   ## help-steps/variables.
   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "1" ]; then
      true "${cyan}$BASH_SOURCE INFO: Using ${under}auto local signing key method${eunder}... ${reset}"

      ## Check, if we previously already created a local OpenPGP signing key.
      if [ ! -f "$WHONIX_LOCAL_SIGNING_KEY_FOLDER/done" ]; then
         true "${cyan}$BASH_SOURCE INFO: We do not yet have a local OpenPGP signing key for our local APT repository. Creating one... ${reset}"

         sudo -E -u "$user_name" mkdir --parents "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"

         ## chmod 700, so gpg will not complain about folder permissions
         sudo -E -u "$user_name" chmod 700 "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"

         ## http://www.gnupg.org/documentation/manuals/gnupg-devel/Unattended-GPG-key-generation.html

         ## https://github.com/ioerror/torbirdy/blob/master/gpg.conf

         echo "
            Key-Type: RSA
            Key-Length: 4096
            Subkey-Type: RSA
            Subkey-Length: 4096
            Name-Real: Whonix auto generated local APT signing key
            Name-Email: whonix@local-signing.key
            Expire-Date: 0
            Preferences: SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
         " | sudo -E -u "$user_name" gpg \
                                       --no-options \
                                       --no-emit-version \
                                       --no-comments \
                                       --display-charset utf-8 \
                                       --keyserver hkp://qdigse2yzvuglcix.onion \
                                       --personal-digest-preferences SHA512 \
                                       --cert-digest-algo SHA512 \
                                       --default-preference-list "SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed" \
                                       --keyserver-options no-honor-keyserver-url \
                                       --fixed-list-mode \
                                       --keyid-format 0xlong \
                                       --use-agent \
                                       --list-options show-uid-validity \
                                       --sig-notation issuer-fpr@notations.openpgp.fifthhorseman.net=%g \
                                       --no-default-keyring \
                                       --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
                                       --batch \
                                       --gen-key

         sudo -E -u "$user_name" touch "$WHONIX_LOCAL_SIGNING_KEY_FOLDER/done"

         true "${cyan}$BASH_SOURCE INFO: Created local OpenPGP signing key for our local APT repository. ${reset}"
      else
         true "${cyan}$BASH_SOURCE INFO: We already have a local OpenPGP signing key for our local APT repository. ${reset}"
      fi
   else
      true "${cyan}$BASH_SOURCE INFO: Using ${under}custom signing key method${eunder}... ${reset}"
   fi

   if [ ! -d "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" ]; then
      msg="ERROR: WHONIX_LOCAL_SIGNING_KEY_FOLDER $WHONIX_LOCAL_SIGNING_KEY_FOLDER does not exist."
      error "WHONIX_LOCAL_SIGNING_KEY_FOLDER $WHONIX_LOCAL_SIGNING_KEY_FOLDER does not exist."
   else
      true "INFO: WHONIX_LOCAL_SIGNING_KEY_FOLDER: $WHONIX_LOCAL_SIGNING_KEY_FOLDER exists, ok."
   fi

   ## Just output list of secret keys in that very folder in case that ever breaks and someone ever sends
   ## a build log, this will help with debugging.
   sudo -E -u "$user_name" gpg \
                             --no-options \
                             --no-default-keyring \
                             --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
                             --keyid-format "0xlong" \
                             --fingerprint \
                             --list-secret-keys

   true "INFO: GPG_AGENT_INFO: $GPG_AGENT_INFO"
   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "1" ]; then
      true
   else
      if [ "$GPG_AGENT_INFO" = "" ]; then
         true "${cyan}${bold}INFO: Variable GPG_AGENT_INFO is not set. gnupg-agent will not be available. Did you forget adding -E to sudo?${reset}"
      fi
      ## Eventually letting builder cache its gpg passwords early, so we do not
      ## pause the build process later when reprepro creates the local apt
      ## repository.
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER/gpg_test_sign"
   fi
}

check_for_uncommited_changes() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ -n "$(git status --porcelain)" ]; then
      if [ "$whonix_build_ignore_uncommitted" = "true" ]; then
         true "${bold}${cyan}$BASH_SOURCE INFO: Git reports uncommitted changes! But you requested to ignore uncommitted changes, continuing... ${reset}"
         true "${cyan}$BASH_SOURCE INFO: Running \"git status\" for debugging. ${reset}"
         git status
         true "${cyan}$BASH_SOURCE INFO: Running git \"clean -d --force --force --dry-run\" for debugging. ${reset}"
         git clean -d --force --force --dry-run
         true
      else
         true "${bold}${red}---------------------------------------------------------------------${reset}"
         true "${bold}${red}$BASH_SOURCE ERROR: Git reports uncommitted changes! ${reset}"
         true "${cyan}$BASH_SOURCE INFO: (And you are not using ${under}--ignore-uncommitted${eunder}, \
which you also should not do for security reasons, unless you know what you are doing. Such as in case you added custom code.) ${reset}"
         true "${cyan}$BASH_SOURCE INFO: Running \"git status\" for your convenience. ${reset}"
         git status
         true "${cyan}$BASH_SOURCE INFO: Running git \"clean -d --force --force --dry-run\" for your convenience. ${reset}"
         git clean -d --force --force --dry-run
         true "${cyan}$BASH_SOURCE You most likely like to run:${reset}
    ${under}$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files${eunder}
${cyan}or if you know what you are doing:${reset}
    ${under}git clean -d --force --force${eunder}
    ${under}git reset --hard${eunder}
"
         true "${bold}${red}---------------------------------------------------------------------${reset}"

         error "Uncommitted changes! See above!"
         true
      fi
   fi
}

cleanup_old_packages() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   true "${cyan}$BASH_SOURCE INFO: Cleaning old packages... ${reset}"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files"

   true "${cyan}$BASH_SOURCE INFO: Cleaned old packages. ${reset}"
}

get_extra_packages() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting extra packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_extra_packages"
   sudo -E -u "$user_name" mkdir --parents "$WHONIX_BINARY/temp_extra_packages"
   cd "$WHONIX_BINARY/temp_extra_packages"

   ## Implemented in help-steps/pre.
   aptcachemaybeenable

   ## Update $whonix_build_sources_list_newer package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   apt-get update \
      $apt_timeout_opts \
      $apt_verify_opts \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0"

   ## Download python-stem from $whonix_build_sources_list_newer.
   sudo -E -u "$user_name" \
      apt-get download --yes \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
         -o Dir::Etc::sourceparts="-" \
         --target-release "$whonix_build_apt_newer_release_codename" \
         python-stem

   true "INFO: apt-get download exit code: $?"

   ## Get rid of $whonix_build_sources_list_newer package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   ## Implemented in help-steps/pre.
   apt_cache_disable

   true "${cyan}$BASH_SOURCE INFO: Got extra packages. ${reset}"
}

create_whonix_debian_packages_without_building_system() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   shopt -s nullglob
   shopt -s dotglob

   for item in "$WHONIX_SOURCE_FOLDER/packages/"*; do
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      cd "$item"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "whonix-developer-meta-files" ]; then
         true "INFO: Skipping $base_name as expected."
         continue
      fi
      if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
         if [ "$(echo "$base_name" | grep "apparmor-profile-")" ]; then
            true "${cyan}INFO: Building apparmor profile: $base_name ${reset}"
         else
            true "${cyan}INFO${reset}: Skipping $base_name as expected because using whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only."
            continue
         fi
      fi
      ## The make_use_lintian is supported by the generic Makefile.
      export make_use_lintian="true"
      local make_file
      if [ -f "setup.py" ]; then
         make_file="makefile_generic"
      else
         make_file="Makefile"
      fi
      test -f "$make_file"
      if [ "$CI" = "true" ]; then
         ## Hiding,
         ## "ERROR: ld.so: object '/usr/$LIB/faketime/libfaketime.so.1' from LD_PRELOAD cannot be preloaded: ignored."
         ## on CI systems because otherwise, "Maximum output exceeded".
         sudo -E -u "$user_name" \
            make -f "$make_file" deb-pkg >/dev/null 2>&1
      else
         sudo -E -u "$user_name" \
            make -f "$make_file" deb-pkg
      fi
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create_whonix_repository() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
      true "${cyan}$BASH_SOURCE INFO: Purging ${under}local${eunder} APT repository... ${reset}"
      sudo -E -u "$user_name" \
         reprepro \
            -V \
            -V \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            removematched "$WHONIX_BUILD_APT_CODENAME" "*"
      true "${cyan}$BASH_SOURCE INFO: Done, purged ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
   else
      true "${cyan}$BASH_SOURCE INFO: Not purging APT repository, because distribution is ${under}${WHONIX_BUILD_APT_CODENAME}${eunder}. ${reset}"
   fi

   true "${cyan}$BASH_SOURCE INFO: Creating ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"

   shopt -s dotglob
   shopt -s nullglob
   local file_name

   true "${cyan}$BASH_SOURCE INFO: Importing .deb files... ${reset}"
   for file_name in "$WHONIX_SOURCE_FOLDER/packages/"*".deb"; do
      sudo -E -u "$user_name" \
         reprepro \
            --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
            --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   done
   true "${cyan}$BASH_SOURCE INFO: Imported .deb files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Importing temp_extra_packages .deb files... ${reset}"
   for file_name in "$WHONIX_BINARY/temp_extra_packages/"*".deb"; do
      sudo -E -u "$user_name" \
         reprepro \
            --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
            --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   done
   true "${cyan}$BASH_SOURCE INFO: Imported temp_extra_packages .deb files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Done, created ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
}

create-debian-packages() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   cleanup_old_packages
   check_for_uncommited_changes

   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   sleep 3

   signing_key
   get_extra_packages
   create_whonix_debian_packages_without_building_system
   create_whonix_repository
}

parse_cmd() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   while :
   do
       case $1 in
           --flavor)
               if [ "$2" = "whonix-custom-workstation" ]; then
                  WHONIX_BUILD_CUSTOM_WORKSTATION="1"
               fi
               shift 2
               ;;
           --allow-uncommitted)
               if [ "$2" = "false" ]; then
                  true "${cyan}INFO: Would stop if uncommitted changes detected.${reset}"
               elif [ "$2" = "true" ]; then
                  true "${cyan}INFO: Would ignore if uncommitted changes detected.${reset}"
                  export whonix_build_ignore_uncommitted="true"
               else
                  echo "${red}${bold}ERROR: supported options for --allow-uncommitted are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --apparmor)
               whonix_build_pkg_apparmor_only="true"
               shift
               ;;
           *)
               break
               ;;
       esac
   done
}

true "${bold}${under}INFO: Currently running script: $BASH_SOURCE ${1+"$@"}${reset}"
parse_cmd ${1+"$@"}
if [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
   true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
else
   create-debian-packages
fi
benchmarktimeend ## sets benchmark_took_time (implemented in help-steps/pre)
true "${bold}${under}INFO: End of: $BASH_SOURCE ${1+"$@"} | $whonix_build_error_counter error(s) detected. (benchmark: $benchmark_took_time)${reset}"
