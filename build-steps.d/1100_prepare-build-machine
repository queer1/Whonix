#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

WHONIX_BUILD_INTERNALRUN="1"
## lsb-release may not be installed yet.
whonix_build_on_operating_system_detect_skip="1"

whonix_build_no_unset_xtrace="true"
true "INFO $0: BEGIN sourcing pre..."
source pre
true "INFO $0: END sourcing pre."
true "INFO $0: BEGIN sourcing colors..."
source colors
true "INFO $0: END sourcing colors."
true "INFO $0: BEGIN sourcing variables..."
source variables
true "INFO $0: END sourcing variables."

unset whonix_build_no_unset_xtrace

unset whonix_build_on_operating_system_detect_skip

root_check

check-virtualbox-vm-exists() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to $ANON_BUILD_INSTALL_TO_ROOT, skipping check if a \
VirtualBox VM named $VMNAME already exists, ok.${reset}"
      return 0
   fi

   if [ "$VMNAME" = "internalrun" ]; then
      true "${cyan}INFO: VNNAME is set to internalrun, skipping check, ok.${reset}"
      return 0
   fi

   ## {{ Checking, if a VM named $VMNAME already exists in VirtualBox.

   local command_v_exit_code="0"
   command -v VBoxManage >/dev/null || { command_v_exit_code="$?" ; true; }

   if [ ! "$command_v_exit_code" = "0" ]; then
      true "${cyan}INFO: VBoxManage command not yet available, ok.${reset}"
      return 0
   fi

   true "${cyan}INFO: Checking, if a VirtualBox VM named $VMNAME already exists...${reset}"

   ## For example, we are checking if there is a VM named Whonix-Gateway or
   ## Whonix-Workstation in VirtualBox. There must be for example no VM named
   ## Whonix-Gateway in Virtual Box, because in the create-vbox-vm step we will
   ## create a VM named Whonix-Gateway. This would not be possible, if a VM
   ## with that name would be already in VirtualBox.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   local vboxmanage_exit_code
   vboxmanage_exit_code="0"
   ## Do not use sudo -E or it will fail.
   sudo -u "$user_name" VBoxManage showvminfo "$VMNAME" >/dev/null 2>/dev/null || { vboxmanage_exit_code="$?" ; true; };

   if [ "$vboxmanage_exit_code" = "0" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: $VMNAME already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing Virtual Machines.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --flavor $WHONIX_BUILD_FLAVOR -- --clean --target virtualbox

To delete both virtual machines, use:

    sudo ./whonix_build --flavor whonix-gateway --flavor whonix-workstation -- --target virtualbox --clean

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox VM named $VMNAME already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox VM named $VMNAME does exist, ok.${reset}"
   fi

   true "${cyan}INFO: Checking, if an VirtualBox ova file $binary_image_ova already exists...${reset}"

   ## For example, we are checking if there is a VirtualBox ova file
   ## /home/user/whonix_binary/Whonix-Gateway-8.6.6.4.ova already exists. There
   ## must be no such file, because otherwise the build would fail later.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   ## Although the above test using "VBoxManage showvminfo" already passed at
   ## this point, it could be the case, that the builder manually deleted the
   ## VirtualBox VM but forgot to delete the ova from whonxi_binary folder.

   if [ -e "$binary_image_ova" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: VirtualBox ova file $binary_image_ova already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing ova files.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --flavor $WHONIX_BUILD_FLAVOR -- --clean --target virtualbox

To delete both virtual machines, use:

    sudo ./whonix_build --flavor whonix-gateway --flavor whonix-workstation -- --clean --target virtualbox

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox ova file $binary_image_ova already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox ova file $binary_image_ova exist, ok.${reset}"
   fi

   ## }}
}

prepare-build-machine() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035
   while :
   do
       case $1 in
           -bm | --baremetal | --bare-metal | --install-to-root | -itr)
               export ANON_BUILD_INSTALL_TO_ROOT="1"
               shift
               ;;
           -f1 | --fast1)
               export WHONIX_BUILD_FAST1="1"
               shift
               ;;
           -f2 | --fast2)
               export WHONIX_BUILD_FAST1="1"
               export WHONIX_BUILD_FAST2="1"
               shift
               ;;
           --)
               shift
               break
               ;;
           *)
               break
               ;;
       esac
   done
   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      ## VirtualBox might not be installed at this point.
      ## Trying anyway, in case this script has already been run and installed
      ## VirtualBox beforehand.
      check-virtualbox-vm-exists
   fi

   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "1" ]; then
      true "${cyan}$BASH_SOURCE INFO: Using ${under}auto local signing key method${eunder}... ${reset}"
   else
      true "${cyan}$BASH_SOURCE INFO: Using ${under}custom signing key method${eunder}... ${reset}"
      if [ "$GPG_AGENT_INFO" = "" ]; then
         true "${cyan}${bold}INFO: Variable GPG_AGENT_INFO is not set. gnupg-agent will not be available. Did you forget adding -E to sudo?${reset}"
      fi
      ## Eventually letting builder cache its gpg passwords early, so we do not
      ## pause the build process later when reprepro creates the local apt
      ## repository.
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER/gpg_test_sign"
   fi

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      true "${bold}${cyan}INFO: run with --fast1 switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ## Debugging.
   true "${bold}${cyan}INFO: PWD: $PWD ${reset}"

   ## {{ Checking if Whonix's source folder has been obtained (git cloned) as user or root.

   stat_output_owner="$(stat -c %U "$BASH_SOURCE")"
   stat_output_group="$(stat -c %G "$BASH_SOURCE")"

   if [ "$stat_output_owner" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root user! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   if [ "$stat_output_group" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root group! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   ## }}

   ## {{ users and groups

   ## Check if user "$user_name" already exist.
   local id_exit_code
   id_exit_code="0"
   id "$user_name" || { id_exit_code="$?" ; true; };
   if [ "$id_exit_code" = "1" ]; then
      true 'INFO: Creating user "$user_name" with password "changeme", because some things have to be run as "$user_name".'
      ## setting password of user "user" to changeme
      ##
      ## How this password was created:
      ## sudo apt-get install whois
      ## mkpasswd
      ## changeme
      ## Resulted in: aTayYxVyw5kDo
      useradd --password aTayYxVyw5kDo --user-group --create-home --shell /bin/bash "$user_name"
   elif [ "$id_exit_code" = "0" ]; then
      true "${cyan}INFO: Not creating user \"$user_name\" with password \"changeme\", because it already exists.${reset}"
   else
      true "${red}${bold}ERROR: id_exit_code was neither 1 or 0, it was: ${id_exit_code}${reset}"
      error "See above!"
   fi

   ## Add user to sudo group.
   addgroup "$user_name" sudo

   ## Debugging.
   true 'INFO: Benchmarking "sudo -u "$user_name" echo "This is a test echo." using "time"...'
   time sudo -u "$user_name" echo "This is a test echo."

   ## }}

   if [ ! "$WHONIX_BUILD_UNATTENDED_PKG_INSTALL" = "1" ]; then
      ## Always keep old configuration file. Do not prompt to install new config files.
      local apt_unattended_opts="--option Dpkg::Options=--force-confold"
   fi

   true "${cyan}INFO: Using longer timeout to allow more reliably downloading using apt-get over Tor. Feel free to out comment apt_timeout_opts in help-steps/variables.${reset}"

   ## {{ install apt-cacher-ng

   ## Using an apt cache to speed up downloading
   ## If you want to build multiple times (for debugging etc.),
   ## it makes sense to install a local apt proxy on your build machine.
   ## That safes download time and traffic.
   ##
   ## Minor: If you build Whonix on Whonix, apt-cacher-ng will go through Tor's TransPort.
   ##
   ## Thanks to source:
   ##    https://linuxexpresso.wordpress.com/2011/02/13/howto-apt-cacher-ng-on-ubuntu/
   ## It would be possible to download without an apt-cacher...
   ## But why? If you do not want to use it, comment out the following lines,
   ## change the mirror settings in grml configuration file and...

   ## Check if apt-cacher-ng is installed.
   local dpkg_exit_code
   dpkg_exit_code="0"
   dpkg-query -Wf '${db:Status-abbrev}' "apt-cacher-ng" 2>/dev/null | grep -q '^i' || { dpkg_exit_code="$?" ; true; };

   if [ ! "$dpkg_exit_code" = "0" ]; then
      ## Update package lists and install apt-cacher-ng.
      aptgetgpgvcreatetmp
      apt-get $apt_timeout_opts $apt_get_gpgv_opts update
      aptgetgpgvparsetmp
      aptgetgpgvdeletetmp

      ## --no-install-recommends to prevent installing avahi-daemon.
      apt-get $apt_unattended_opts $apt_timeout_opts --no-install-recommends --yes install apt-cacher-ng
   fi

   ## Restart apt-cacher-ng.
   ## Should not be required, but it was for me.
   service apt-cacher-ng restart

   ## Check status of apt-cacher-ng.
   service apt-cacher-ng status

   ## }}

   ## Implemented in help-steps/pre.
   aptcachemaybeenable

   ## Update package lists after enabling apt-cacher-ng.
   aptgetgpgvcreatetmp
   apt-get $apt_timeout_opts $apt_get_gpgv_opts update
   aptgetgpgvparsetmp
   aptgetgpgvdeletetmp

   if [ ! "$WHONIX_BUILD_UPGRADE_BUILD_MACHINE" = "0" ]; then
      ## Update package lists and upgrade.
      apt-get $apt_unattended_opts $apt_timeout_opts --yes dist-upgrade
   fi

   ###############################################
   ## Build Dependencies for Whonix Build Script #
   ###############################################
   apt-get $apt_timeout_opts $apt_unattended_opts --yes install $whonix_build_script_build_dependency

   if [ "$CI" = "true" ]; then
      true "INFO: CI detected, skip installation of git."
   else
      apt-get $apt_timeout_opts $apt_unattended_opts --yes install \
         git
   fi

   ## {{{ whonix_build_on_operating_system

   ## lsb-release will now be installed. source variables again to set
   ## whonix_build_on_operating_system
   MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd "$MYDIR"
   cd ..
   cd help-steps
   source variables

   ## }}}

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      ###########################################
      ## Build Dependency for Bare Metal Builds #
      ###########################################
      local bare_metal_basic_package_list
      bare_metal_basic_package_list="$(grep -vE "^\s*#" "$WHONIX_SOURCE_FOLDER/grml_packages" | tr "\n" " ")"
      if [ "$CI" = "true" ]; then
         ## Would fail on drone.io. ("E: Unable to locate package acpi-support-base")
         true "INFO: CI detected, skip installation of bare_metal_basic_package_list."
      else
         apt-get \
            $apt_timeout_opts \
            $apt_unattended_opts \
            --yes \
            install \
            $bare_metal_basic_package_list
      fi
   else
      ##################################################################
      ## Build Dependencies for creating Virtual Machine Images (.raw) #
      ##################################################################
      ## - for grml-debootstrap
      ##      grml-debootstrap kpartx mksh parted qemu-utils
      ## - for converting images (qemu-img)
      ##      qemu-utils
      ## - for creating VirtualBox VM images
      ##      virtualbox
      ## - required for mounting vdi images
      ##   libguestfs-tools is not required in CI/VM.
      ##      libguestfs-tools
      ##      guestmount (wheezy only)
      ##      guestfish (wheezy only)
      apt-get $apt_timeout_opts $apt_unattended_opts --no-install-recommends --yes install \
         qemu-utils \
         grml-debootstrap \
         parted \
         kpartx \
         mksh \
         libguestfs-tools

      if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
         ## Hack for Ubuntu 12.04 Precise Pangolin / Travis CI.
         true
      else
         ## Hack for Debian Wheezy.
         ## guestmount has been merged into libguestfs-tools in Debian.
         ## guestfish has been merged into libguestfs-tools in Debian.
         ## || true because this would fail on Debian Jessie.
         apt-get $apt_timeout_opts $apt_unattended_opts --yes install guestmount || true
         apt-get $apt_timeout_opts $apt_unattended_opts --yes install guestfish || true
      fi

      ## Sanity test.
      command -v guestmount >/dev/null
      command -v guestfish >/dev/null
      command -v virt-filesystems >/dev/null

      ## Debugging.
      ## guestunmount is not available in Debian Wheezy. Only since Debian Jessie.
      command -v guestunmount || true

      if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
         #######################################################################
         ## Build Dependencies for creating VirtualBox Images (.vdi and .ova)  #
         #######################################################################
         true "${cyan}\
INFO${reset}: Attempting to install linux headers...
Linux headers have to be installed so VirtualBox kernel modules can be
compiled. When linux headers are not installed, the following
warning will be shown.
   [....] Starting VirtualBox kernel modules [....]
   No suitable module for running kernel found ... [ FAIL ]
   invoke-rc.d: initscript virtualbox, action \"restart\" failed.
The build would still complete, because the build script does not start
VirtualBox, hence does not affect the build. The build script only
uses \`VBoxManage\` for creation of virtual machine description files
and that tool does not need VirtualBox kernel modules. However, without
kernel modules, the user might wonder why Whonix virtual machines
cannot be started after building Whonix. Hence, we attempt to install them.
If it succeeds, good. If not, we fail open, i.e. no need to break the build
at this point. (This is useful for builders who currently have not started
a linux kernel.)"

         local linux_headers
         linux_headers="linux-headers-$(uname -r)" || true
         apt-get $apt_timeout_opts $apt_unattended_opts --yes install \
            "$linux_headers" || true

         apt-get $apt_timeout_opts $apt_unattended_opts --yes install \
            virtualbox || true

         ## VirtualBox will be be installed at this point.
         check-virtualbox-vm-exists
      fi
   fi

   ## {{{

   ########################################################
   ## install some build dependencies from Debian testing #
   ########################################################

   ## {{ grml-debootstrap

   ## Installing newer grml-debootstrap, because it contains the locales fix.
   ## This snippet can be removed in Debain jessie.

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "INFO: ANON_BUILD_INSTALL_TO_ROOT is set to $ANON_BUILD_INSTALL_TO_ROOT, install of grml-debootstrap not required, ok."
   else
      local grml_debootstrap_version_installed grml_debootstrap_version_minimum_required dpkg_exit_code
      grml_debootstrap_version_installed="$(dpkg-query --show --showformat='${Version}' "grml-debootstrap")"
      grml_debootstrap_version_minimum_required="0.67"
      dpkg_exit_code="0"
      dpkg --compare-versions "$grml_debootstrap_version_installed" ge "$grml_debootstrap_version_minimum_required" || { dpkg_exit_code="$?" ; true; };
      if [ "$dpkg_exit_code" = "0" ]; then
         true "INFO: grml-debootstrap installed version $grml_debootstrap_version_installed is equal or higher $grml_debootstrap_version_minimum_required already installed, ok."
      else
         true "INFO: grml-debootstrap installed version $grml_debootstrap_version_installed not equal or higher $grml_debootstrap_version_minimum_required install required, ok."
         local install_from_testing_required="1"
      fi
   fi

   ## }}

   ## {{ sleuthkit

   #sleuthkit_version="$(dpkg-query --show --showformat='${Version}' "sleuthkit")"
   #local dpkg_exit_code="0"
   #dpkg --compare-versions "$sleuthkit_version" ge "4.1.3" || { dpkg_exit_code="$?" ; true; };
   #if [ "$dpkg_exit_code" = "0" ]; then
      #true "INFO: sleuthkit version equal or higher 4.1.3 already installed, ok."
   #else
      #true "INFO: sleuthkit version equal or higher 4.1.3 install required, ok."
      #local install_from_testing_required="1"
   #fi

   ## }}

   ## Check if config-package-dev with debhelper support is installed.
   ## (Build Dependency for Whonix Build Script for creating .deb packages.)
   if [ ! -d "/usr/share/doc/config-package-dev/examples/debhelper/" ]; then
      local install_from_testing_required="1"
      true "INFO: config_package_dev with debhelper support install required, ok."
   else
      true "INFO: config-package-dev with debhelper support already installed, ok."
   fi

   if [ "$install_from_testing_required" = "1" ]; then
      local TEMP="/etc/apt/sources.list.d/whonix_temp.list"

      if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
         ## Hack for Ubuntu 12.04 Precise Pangolin / Travis CI.
         echo "deb http://us.archive.ubuntu.com/ubuntu/ $whonix_build_apt_newer_release_codename main universe" > "$TEMP"
      else
         ## Hack for Debian Wheezy.
         echo "deb http://ftp.us.debian.org/debian $whonix_build_apt_newer_release_codename main" > "$TEMP"
      fi

      ## Update package lists to include temporary repository.
      aptgetgpgvcreatetmp
      apt-get \
         $apt_timeout_opts \
         -o Dir::Etc::sourcelist="$TEMP" \
         -o Dir::Etc::sourceparts="-" \
         -o APT::Get::List-Cleanup="0" \
         $apt_get_gpgv_opts \
         update
      aptgetgpgvparsetmp
      aptgetgpgvdeletetmp

      apt-get \
         --yes \
         $apt_timeout_opts \
         $apt_unattended_opts \
         -o APT::Default-Release="$whonix_build_apt_stable_release" \
         install \
         "config-package-dev/$whonix_build_apt_newer_release_codename" \
         "grml-debootstrap/$whonix_build_apt_newer_release_codename"

         #"sleuthkit/$whonix_build_apt_newer_release_codename"

      if [ "$CI" = "true" ]; then
         ## Small hack for CI.
         ## Get newer faketime, because faketime 0.8 segfaults on Ubuntu.
         apt-get --yes \
            $apt_timeout_opts \
            $apt_unattended_opts \
            --target-release "$whonix_build_apt_newer_release_codename" \
            install \
            faketime
      fi

      ## Removing temporary repository.
      rm --force "$TEMP"

      ## Update package lists again to get rid of temporary repository.
      apt-get \
         --no-download \
         --list-cleanup \
         update
   fi

   ## }}}

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "INFO: Skip running update-guestfs-appliance, because ANON_BUILD_INSTALL_TO_ROOT is set to 1, ok."
   else
      ## See if status file, which tells us whether we have already done this or
      ## not already exists.
      if [ ! -f "$WHONIX_BINARY/status_files/update-guestfs-appliance.done" ]; then
         ## Status file does not exist yet.
         ## Ensure status_files folder exists.
         sudo -u "$user_name" mkdir --parents "$WHONIX_BINARY/status_files"
         ## The following is required to prevent the error
         ## "libguestfs: error: /usr/bin/supermin-helper exited with error status 1."
         ## Need to run this only once.
         update-guestfs-appliance
         ## Create a status file to remember, we have already done this.
         sudo -u "$user_name" touch "$WHONIX_BINARY/status_files/update-guestfs-appliance.done"
      fi
   fi

   ##Should there ever be a problem with apt-cacher-ng (package verification failure) (rare cases), use this.
   #sudo apt-get update
   #sudo apt-get autoremove
   #sudo apt-get dist-upgrade
   #sudo apt-get clean
   #sudo apt-get autoclean

   ## Implemented in help-steps/pre.
   apt_cache_disable

   true "INFO: Updating git sub modules..."

   sudo -u "$user_name" git submodule sync
   sudo -u "$user_name" git submodule update --init --recursive

   true "INFO: Updated git sub modules."

   ## Debugging.
   cat /usr/sbin/policy-rc.d || true

   if [ "$CI" = "true" ]; then
      ## Ensure, that haveged is functional on travis-ci machines.
      service haveged restart
      service haveged start
      ## Fails on travis-ci machines?!
      service haveged status || true

      ## Debugging.
      /etc/init.d/haveged restart || true
      /etc/init.d/haveged start || true
      ## Fails on travis-ci machines?!
      /etc/init.d/haveged status || true
   else
      ## Debugging.
      service haveged status
   fi

   ## Trying to work around a Travis CI specific build error while running grml-debootstrap.
   ##
   ## /proc/devices: No entry for misc found
   ## Is device-mapper driver missing from kernel?
   ## Failure to communicate with kernel device-mapper driver.
   ## device mapper prerequisites not met
   ## * Error setting up loopback device.
   ## -> Failed (rc=1)
   ##
   ## Debugging.
   ## Check if device-mapper is in /proc/devices. || true to overwrite, if not.
   #grep device-mapper /proc/devices || true
   ## According to http://www.tldp.org/HOWTO/LVM-HOWTO/builddmmod.html
   #modprobe dm_mod || true
   ## Check again if device-mapper is in /proc/devices. || true to overwrite, if not.
   #grep device-mapper /proc/devices || true

   ## Debugging.
   #cat /proc/devices

   if [ "$CI" = "true" ]; then
      true "${bold}${red}INFO: CI detected. Linking /dev/urandom to /dev/random. In \
CI environment, there is usually very little entropy. Therefore gpg key \
creation takes very long. Since no images are deployed from CI systems, we \
can do this. Do not deploy these images! ${reset}"
      ## || true to support re-running the script.
      mv /dev/random /dev/random_orig || true
      ln -s /dev/urandom /dev/random || true
   fi

   ## Debugging CI.
   if [ "$CI" = "true" ]; then
      ls -la "/etc/resolv.conf"
      cat "/etc/resolv.conf"
      ls -la "/etc/hostname"
      cat "/etc/hostname"
      ls -la "/etc/hosts"
      cat "/etc/hosts"
      hostname
      hostname --all-fqdns
      hostname --long
   fi
}

true "${bold}${under}INFO: Currently running script: $BASH_SOURCE ${1+"$@"}${reset}"
prepare-build-machine ${1+"$@"}
benchmarktimeend ## sets benchmark_took_time (implemented in help-steps/pre)
true "${bold}${under}INFO: End of: $BASH_SOURCE ${1+"$@"} | $whonix_build_error_counter error(s) detected. (benchmark: $benchmark_took_time)${reset}"
